/*
     _____ __    _____
    |     |  |  |_   _|  C++ Object Libraries for IBM i
    |  |  |  |__ _| |_   File:   OBJECT/fs.h
    |_____|_____|_____|  Author: Sergey Chebotarev

    1. Имена компонентов пути должны быть приведены к верхнему регистру (*libl не воспринимается АПИшками)
    2.

*/

#ifndef OLI_OBJECT_FS_H
#define OLI_OBJECT_FS_H

#include "OBJECT/define.h"
#include "ICORE/string.h"

IBMI_NAMESPACE_BEGIN ///////////////////////////////////////////////////////////////////////////////////////////////////
FS_NAMESPACE_BEGIN /////////////////////////////////////////////////////////////////////////////////////////////////////





//***** ПУТЬ К ОБЪЕКТУ ФАЙЛОВОЙ СИСТЕМЫ IBM I **************************************************************************
class path
{
  // MEMBER TYPES ------------------------------------------------------------------------------------------------------
  public:
  typedef ibmi::string<10> name_type;



  // MEMBER FUNCTIONS --------------------------------------------------------------------------------------------------
  public:
  path() = default;
  path(const std::string& p)            { parse_path(p); }
  path& operator=(const std::string& p) { parse_path(p); return *this; }



  // OPERATIONS --------------------------------------------------------------------------------------------------------
  public:
  std::string library()   const { return m_library.stdstr(); }
  std::string object()    const { return m_object.stdstr(); }
  std::string member()    const { return m_member.stdstr(); }



  // SERVICE -----------------------------------------------------------------------------------------------------------
  private:
  /* Парсинг пути к объекту
     Формат пути должен соответствовать шаблону [LIBNAME/]OBJNAME[(MBRNAME)], где LIBNAME - имя библиотеки,
     OBJNAME - имя объекта, MBRNAME - имя мембера (если объектом является физический файл).
     Имена, указанные в [] являются не обязательными. Имя библиотеки может иметь значение *LIBL, *CURLIB.
     Имя мембера может иметь значение *FIRST.
     В случае несоответствия пути шаблону бросается исключение std::invalid_argument
  */ void parse_path(std::string);



  // DATA --------------------------------------------------------------------------------------------------------------
  private:
  name_type m_object;
  name_type m_library;
  name_type m_member;
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





FS_NAMESPACE_END ///////////////////////////////////////////////////////////////////////////////////////////////////////
IBMI_NAMESPACE_END /////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // OLI_OBJECT_FS_H

